# Development Environment Variables
# Copy this file to .env.local for local development

# ============================================
# APPLICATION SETTINGS
# ============================================

# Environment
NODE_ENV=development

# Application URL (local development)
NEXT_PUBLIC_APP_URL=http://localhost:3000

# ============================================
# DATABASE CONFIGURATION (Docker PostgreSQL)
# ============================================

# Database connection URL for Prisma
DATABASE_URL="postgresql://backroom_user:development_password_2024@localhost:5432/backroom_bookings_dev?schema=public"

# Docker PostgreSQL environment variables (must match docker-compose.dev.yml)
DB_USER=backroom_user
DB_PASSWORD=development_password_2024
DB_NAME=backroom_bookings_dev

# ============================================
# STRIPE CONFIGURATION (TEST MODE)
# ============================================

# Test Stripe keys (get from https://dashboard.stripe.com/test/apikeys)
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY="pk_test_51234567890abcdefghijklmnopqrstuvwxyz"
STRIPE_SECRET_KEY="sk_test_51234567890abcdefghijklmnopqrstuvwxyz"

# Webhook secret for local testing with Stripe CLI
# Run: stripe listen --forward-to localhost:3000/api/payment/webhook
STRIPE_WEBHOOK_SECRET="whsec_1234567890abcdefghijklmnopqrstuvwxyz"

# ============================================
# EMAIL CONFIGURATION (Development)
# ============================================

# Option 1: Use MailHog (recommended for development)
# MailHog is included in docker-compose.dev.yml
EMAIL_PROVIDER=mailhog
SMTP_HOST=localhost
SMTP_PORT=1025
EMAIL_FROM="bookings@backroom-dev.local"
EMAIL_FROM_NAME="Backroom Leeds (Dev)"

# Option 2: Use SendGrid Sandbox Mode (if you have an account)
# SENDGRID_API_KEY="SG.test_key_here"
# EMAIL_FROM="test@yourdomain.com"
# EMAIL_FROM_NAME="Backroom Leeds (Dev)"

# ============================================
# AUTHENTICATION
# ============================================

# JWT Secret (for development, can be simple)
JWT_SECRET="development-secret-key-change-in-production"

# Default admin credentials (development only)
ADMIN_EMAIL="admin@localhost"
ADMIN_PASSWORD="admin123"

# ============================================
# APPLICATION FEATURES
# ============================================

# Enable/disable features for development
ENABLE_STRIPE_PAYMENTS=true
ENABLE_EMAIL_NOTIFICATIONS=true
ENABLE_BOOKING_CONFIRMATIONS=true
ENABLE_DEBUG_MODE=true
ENABLE_ERROR_REPORTING=true

# Business settings
RESTAURANT_NAME="The Backroom Bar (Dev)"
RESTAURANT_PHONE="+1234567890"
RESTAURANT_ADDRESS="123 Dev Street, Leeds"
TIMEZONE="Europe/London"

# Booking settings
MAX_PARTY_SIZE=20
MIN_PARTY_SIZE=1
BOOKING_ADVANCE_DAYS=30
CANCELLATION_HOURS=24

# ============================================
# DEVELOPMENT SETTINGS
# ============================================

# Debug and logging
LOG_LEVEL=debug
SHOW_SQL_LOGS=true
PRISMA_LOG_LEVEL="query,info,warn,error"

# Development server
PORT=3000
HOST=localhost

# Hot reload settings
NEXT_TELEMETRY_DISABLED=1
WATCHPACK_POLLING=true  # Enable if using Docker on Windows/Mac

# ============================================
# TESTING SETTINGS
# ============================================

# Test database (optional, for running tests)
TEST_DATABASE_URL="postgresql://backroom_user:development_password_2024@localhost:5432/backroom_bookings_test?schema=public"

# Test Stripe cards
# 4242 4242 4242 4242 - Succeeds
# 4000 0000 0000 3220 - Requires authentication
# 4000 0000 0000 9995 - Declines

# ============================================
# OPTIONAL SERVICES
# ============================================

# pgAdmin (included in docker-compose.dev.yml)
PGADMIN_URL=http://localhost:5050
PGADMIN_EMAIL=admin@localhost.com
PGADMIN_PASSWORD=admin

# MailHog Web UI
MAILHOG_URL=http://localhost:8025

# ============================================
# NOTES FOR DEVELOPMENT SETUP
# ============================================

# 1. Quick start commands:
#    docker-compose -f docker-compose.dev.yml up -d
#    npm install
#    npx prisma generate
#    npx prisma migrate dev
#    npm run dev

# 2. Useful development commands:
#    npm run db:studio     - Open Prisma Studio
#    npm run db:check      - Check database connection
#    npm run lint          - Run linter
#    pm2 logs              - View PM2 logs (if using PM2)

# 3. Testing Stripe webhooks locally:
#    stripe login
#    stripe listen --forward-to localhost:3000/api/payment/webhook
#    stripe trigger payment_intent.succeeded

# 4. Database management:
#    - pgAdmin: http://localhost:5050
#    - Prisma Studio: npm run db:studio
#    - Direct connection: psql -h localhost -U backroom_user -d backroom_bookings_dev

# 5. Email testing:
#    - MailHog UI: http://localhost:8025
#    - All emails sent in dev will appear in MailHog