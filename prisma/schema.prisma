generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Table {
  id             String    @id @default(uuid())
  tableNumber    Int       @unique
  floor          Floor
  capacityMin    Int
  capacityMax    Int
  description    String
  features       String[]
  isVip          Boolean   @default(false)
  canCombineWith Int[]     @default([])
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]

  @@index([floor, isActive])
  @@index([capacityMin])
  @@index([capacityMax])
  @@map("tables")
}

model Customer {
  id               String    @id @default(uuid())
  firstName        String
  lastName         String
  email            String    @unique
  phone            String
  dateOfBirth      DateTime?
  marketingConsent Boolean   @default(false)
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  bookings         Booking[]

  @@map("customers")
}

model Booking {
  id               String                @id @default(uuid())
  bookingReference String                @unique @default(cuid())
  tableId          String
  customerId       String
  bookingDate      DateTime
  bookingTime      String
  partySize        Int
  status           BookingStatus         @default(PENDING)
  depositAmount    Decimal               @default(50.00)
  depositPaid      Boolean               @default(false)
  stripePaymentId  String?
  stripeIntentId   String?
  drinkPackageId   String?
  specialRequests  String?
  internalNotes    String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  depositRefunded  Boolean               @default(false)
  paymentDate      DateTime?
  refundAmount     Int?
  refundDate       DateTime?
  champagnes       BookingChampagne[]
  modifications    BookingModification[]
  spirits          BookingSpirit[]
  customer         Customer              @relation(fields: [customerId], references: [id])
  drinkPackage     DrinkPackage?         @relation(fields: [drinkPackageId], references: [id])
  table            Table                 @relation(fields: [tableId], references: [id])
  customOrder      CustomOrder?
  paymentLogs      PaymentLog[]

  @@unique([tableId, bookingDate, bookingTime])
  @@index([bookingDate])
  @@index([status])
  @@index([bookingReference])
  @@index([bookingDate, bookingTime])
  @@index([customerId])
  @@index([status, bookingDate])
  @@index([createdAt])
  @@map("bookings")
}

model DrinkPackage {
  id          String    @id @default(uuid())
  name        String    @unique
  price       Decimal
  description String
  includes    Json
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  @@map("drink_packages")
}

model CustomOrder {
  id         String   @id @default(uuid())
  bookingId  String   @unique
  items      Json
  totalPrice Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("custom_orders")
}

model Spirit {
  id             String          @id @default(uuid())
  category       String
  brand          String
  name           String
  price          Decimal
  isActive       Boolean         @default(true)
  sortOrder      Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bookingSpirits BookingSpirit[]

  @@unique([category, brand, name])
  @@index([category])
  @@map("spirits")
}

model Champagne {
  id                String             @id @default(uuid())
  brand             String
  name              String
  price             Decimal
  isActive          Boolean            @default(true)
  sortOrder         Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bookingChampagnes BookingChampagne[]

  @@unique([brand, name])
  @@map("champagnes")
}

model AdminUser {
  id           String    @id @default(uuid())
  email        String    @unique
  name         String
  passwordHash String
  role         String    @default("staff")
  isActive     Boolean   @default(true)
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("admin_users")
}

model BookingSpirit {
  id        String   @id @default(uuid())
  bookingId String
  spiritId  String
  quantity  Int      @default(1)
  price     Decimal
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  spirit    Spirit   @relation(fields: [spiritId], references: [id])

  @@unique([bookingId, spiritId])
  @@map("booking_spirits")
}

model BookingChampagne {
  id          String    @id @default(uuid())
  bookingId   String
  champagneId String
  quantity    Int       @default(1)
  price       Decimal
  createdAt   DateTime  @default(now())
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  champagne   Champagne @relation(fields: [champagneId], references: [id])

  @@unique([bookingId, champagneId])
  @@map("booking_champagnes")
}

model PaymentLog {
  id              String   @id @default(uuid())
  bookingId       String
  stripePaymentId String
  amount          Int
  currency        String
  status          String
  errorMessage    String?
  metadata        Json?
  createdAt       DateTime @default(now())
  booking         Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([stripePaymentId])
  @@map("payment_logs")
}

model BookingModification {
  id           String   @id @default(uuid())
  bookingId    String
  modifiedBy   String
  modifiedAt   DateTime @default(now())
  previousData Json
  newData      Json
  reason       String?
  emailSent    Boolean  @default(false)
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@map("booking_modifications")
}

enum Floor {
  UPSTAIRS
  DOWNSTAIRS
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}
