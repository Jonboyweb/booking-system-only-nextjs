#!/bin/bash

# Script to update Cloudflare IP ranges for CloudPanel
# This ensures only Cloudflare can access your server directly
# Run this periodically via cron to keep IPs updated

# Configuration
CLOUDFLARE_IPS_V4_URL="https://www.cloudflare.com/ips-v4"
CLOUDFLARE_IPS_V6_URL="https://www.cloudflare.com/ips-v6"
NGINX_CF_CONFIG="/etc/nginx/cloudflare-ips.conf"
BACKUP_DIR="/home/door50a-br/backups/cloudflare-ips"
LOG_FILE="/home/door50a-br/logs/cloudflare-ips-update.log"

# Create necessary directories
mkdir -p "$(dirname "$LOG_FILE")"
mkdir -p "$BACKUP_DIR"

# Function to log messages
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_message "ERROR: This script must be run as root"
        exit 1
    fi
}

# Function to backup current configuration
backup_config() {
    if [ -f "$NGINX_CF_CONFIG" ]; then
        BACKUP_FILE="$BACKUP_DIR/cloudflare-ips-$(date +%Y%m%d-%H%M%S).conf"
        cp "$NGINX_CF_CONFIG" "$BACKUP_FILE"
        log_message "Backed up current configuration to $BACKUP_FILE"
        
        # Keep only last 10 backups
        ls -t "$BACKUP_DIR"/cloudflare-ips-*.conf 2>/dev/null | tail -n +11 | xargs rm -f 2>/dev/null
    fi
}

# Function to fetch and update Cloudflare IPs
update_cloudflare_ips() {
    log_message "Starting Cloudflare IP update..."
    
    # Create temporary file
    TEMP_FILE=$(mktemp)
    
    # Add header
    cat > "$TEMP_FILE" << 'EOF'
# Cloudflare IP ranges
# Auto-generated by update-cloudflare-ips.sh
# Last updated: DATE_PLACEHOLDER

# IPv4 ranges
EOF
    
    # Replace date placeholder
    sed -i "s/DATE_PLACEHOLDER/$(date '+%Y-%m-%d %H:%M:%S')/" "$TEMP_FILE"
    
    # Fetch IPv4 addresses
    log_message "Fetching Cloudflare IPv4 ranges..."
    IPV4_RESPONSE=$(curl -s -w "\n%{http_code}" "$CLOUDFLARE_IPS_V4_URL")
    HTTP_CODE=$(echo "$IPV4_RESPONSE" | tail -n1)
    IPV4_DATA=$(echo "$IPV4_RESPONSE" | head -n-1)
    
    if [ "$HTTP_CODE" != "200" ]; then
        log_message "ERROR: Failed to fetch IPv4 ranges (HTTP $HTTP_CODE)"
        rm -f "$TEMP_FILE"
        exit 1
    fi
    
    # Add IPv4 addresses to config
    echo "$IPV4_DATA" | while read -r ip; do
        if [ -n "$ip" ]; then
            echo "set_real_ip_from $ip;" >> "$TEMP_FILE"
        fi
    done
    
    # Add IPv6 header
    echo "" >> "$TEMP_FILE"
    echo "# IPv6 ranges" >> "$TEMP_FILE"
    
    # Fetch IPv6 addresses
    log_message "Fetching Cloudflare IPv6 ranges..."
    IPV6_RESPONSE=$(curl -s -w "\n%{http_code}" "$CLOUDFLARE_IPS_V6_URL")
    HTTP_CODE=$(echo "$IPV6_RESPONSE" | tail -n1)
    IPV6_DATA=$(echo "$IPV6_RESPONSE" | head -n-1)
    
    if [ "$HTTP_CODE" != "200" ]; then
        log_message "WARNING: Failed to fetch IPv6 ranges (HTTP $HTTP_CODE)"
    else
        # Add IPv6 addresses to config
        echo "$IPV6_DATA" | while read -r ip; do
            if [ -n "$ip" ]; then
                echo "set_real_ip_from $ip;" >> "$TEMP_FILE"
            fi
        done
    fi
    
    # Add real IP header configuration
    cat >> "$TEMP_FILE" << 'EOF'

# Use Cloudflare's CF-Connecting-IP header for the real IP
real_ip_header CF-Connecting-IP;

# Fallback to X-Forwarded-For if CF-Connecting-IP is not present
# real_ip_header X-Forwarded-For;

# Trust only Cloudflare IPs
real_ip_recursive on;
EOF
    
    # Count total IPs
    IP_COUNT=$(grep -c "set_real_ip_from" "$TEMP_FILE")
    log_message "Fetched $IP_COUNT IP ranges"
    
    # Validate configuration
    if [ "$IP_COUNT" -lt 10 ]; then
        log_message "ERROR: Too few IP ranges fetched (got $IP_COUNT, expected at least 10)"
        rm -f "$TEMP_FILE"
        exit 1
    fi
    
    # Backup current configuration
    backup_config
    
    # Move new configuration into place
    mv "$TEMP_FILE" "$NGINX_CF_CONFIG"
    chmod 644 "$NGINX_CF_CONFIG"
    log_message "Updated $NGINX_CF_CONFIG with new IP ranges"
    
    # Test nginx configuration
    log_message "Testing nginx configuration..."
    if nginx -t 2>/dev/null; then
        log_message "Nginx configuration test passed"
        
        # Reload nginx
        log_message "Reloading nginx..."
        systemctl reload nginx
        
        if [ $? -eq 0 ]; then
            log_message "SUCCESS: Nginx reloaded with updated Cloudflare IPs"
        else
            log_message "ERROR: Failed to reload nginx"
            exit 1
        fi
    else
        log_message "ERROR: Nginx configuration test failed"
        
        # Restore backup
        if [ -f "$BACKUP_FILE" ]; then
            log_message "Restoring previous configuration..."
            cp "$BACKUP_FILE" "$NGINX_CF_CONFIG"
            systemctl reload nginx
        fi
        
        exit 1
    fi
}

# Function to create nginx site configuration snippet
create_site_snippet() {
    SNIPPET_FILE="/etc/nginx/snippets/cloudflare-only.conf"
    
    cat > "$SNIPPET_FILE" << 'EOF'
# Allow only Cloudflare IPs
# Include this in your site configuration to restrict access

# Deny all IPs by default
deny all;

# Allow Cloudflare IPs (included from main config)
include /etc/nginx/cloudflare-ips.conf;

# Additional security headers for Cloudflare
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;

# Log real IP
set $real_ip $http_cf_connecting_ip;
if ($real_ip = '') {
    set $real_ip $remote_addr;
}
EOF
    
    chmod 644 "$SNIPPET_FILE"
    log_message "Created nginx snippet at $SNIPPET_FILE"
}

# Function to set up cron job
setup_cron() {
    CRON_FILE="/etc/cron.d/cloudflare-ips-update"
    SCRIPT_PATH="/home/door50a-br/scripts/update-cloudflare-ips.sh"
    
    cat > "$CRON_FILE" << EOF
# Update Cloudflare IPs daily at 6 AM
0 6 * * * root $SCRIPT_PATH >/dev/null 2>&1
EOF
    
    chmod 644 "$CRON_FILE"
    log_message "Created cron job at $CRON_FILE"
}

# Main execution
main() {
    log_message "========================================="
    log_message "Cloudflare IP Update Script Started"
    
    # Check if running as root
    check_root
    
    # Update Cloudflare IPs
    update_cloudflare_ips
    
    # Create nginx snippet for easy inclusion
    create_site_snippet
    
    # Set up cron job if not exists
    if [ ! -f "/etc/cron.d/cloudflare-ips-update" ]; then
        setup_cron
    fi
    
    log_message "Cloudflare IP Update Complete"
    log_message "========================================="
}

# Run main function
main "$@"